{"accountMappings":[{"name":"AdditionalFields.userPrincipalName","mode":"complex","value":"function acronym(value) {\n    let matches = value.match(/\\b(\\w)/g); // ['J','S','O','N']\n    return matches.join(''); // JSON\n}\n\n// Please enter the mapping logic to generate the common name.\nfunction generateCommonName() {\n\tconst suffix = Iteration === 0 ? '' : Iteration;\n\n\tconst firstNameSub = Iteration + 1;\n    \n    let firstName = Person.Name.NickName.substring(0, firstNameSub);\n\tlet middleName = Person.Name.FamilyNamePrefix;\n\tlet lastName = Person.Name.FamilyName;\n\n\tlet mailNickname = firstName;\n\t//Check if the middleName variable contains data\n\tif (typeof middleName !== 'undefined' && middleName) { mailNickname = mailNickname + acronym(middleName); }\n\tmailNickname = mailNickname + lastName;\n\n\t//Remove blank chars\n\tmailNickname = mailNickname.replace(/\\s/g,'');\n\n\t//Remove diacritical chars\n\tmailNickname = deleteDiacriticalMarks(mailNickname);\n\n    if (firstNameSub > firstName.length) {\n        mailNickname = mailNickname + suffix;\n    }\n\n    mailNickname = mailNickname + '@yourdomain.com';\n\n\treturn mailNickname;\n}\n\ngenerateCommonName();","unique":true,"update":false,"storeInAccountData":true},{"name":"CommonName","mode":"complex","value":"function acronym(value) {\n    let matches = value.match(/\\b(\\w)/g); // ['J','S','O','N']\n    return matches.join(''); // JSON\n}\n\n// Please enter the mapping logic to generate the common name.\nfunction generateCommonName() {\n\tconst suffix = Iteration === 0 ? '' : Iteration;\n\n\tconst firstNameSub = Iteration + 1;\n    \n    let firstName = Person.Name.NickName.substring(0, firstNameSub);\n\tlet middleName = Person.Name.FamilyNamePrefix;\n\tlet lastName = Person.Name.FamilyName;\n\n\tlet mailNickname = firstName;\n\t//Check if the middleName variable contains data\n\tif (typeof middleName !== 'undefined' && middleName) { mailNickname = mailNickname + acronym(middleName); }\n\tmailNickname = mailNickname + lastName;\n\n\t//Remove blank chars\n\tmailNickname = mailNickname.replace(/\\s/g,'');\n\n\t//Remove diacritical chars\n\tmailNickname = deleteDiacriticalMarks(mailNickname);\n\n    if (firstNameSub > firstName.length) {\n        mailNickname = mailNickname + suffix;\n    }\n\n\treturn mailNickname;\n}\n\ngenerateCommonName();","unique":true,"update":false,"storeInAccountData":false},{"name":"DisplayName","mode":"complex","value":"// Please enter the mapping logic to generate the displayName based on name convention.\nfunction generateDisplayName() {\n    const suffix = \" | LLN\"\n\tlet firstName = Person.Name.NickName;\n\tlet middleName = Person.Name.FamilyNamePrefix;\n\tlet lastName = Person.Name.FamilyName;\n\tlet middleNamePartner = Person.Name.FamilyNamePartnerPrefix;\n\tlet lastNamePartner = Person.Name.FamilyNamePartner;\n\n\tswitch(Person.Name.Convention) {\n\t\tcase 'B':\n\t\tcase 'BP':\n\t\t\tnameFormatted = firstName\n\t\t\tif (typeof middleName !== 'undefined' && middleName) { nameFormatted = nameFormatted + ' ' + middleName }\n\t\t\tnameFormatted = nameFormatted + ' ' + lastName;\n\t\t\tbreak;\n\t\tcase 'P':\n\t\tcase 'PB':\n\t\t\tnameFormatted = firstName\n\t\t\tif (typeof middleNamePartner !== 'undefined' && middleNamePartner) { nameFormatted = nameFormatted + ' ' + middleNamePartner }\n\t\t\tnameFormatted = nameFormatted + ' ' + lastNamePartner;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tnameFormatted = firstName\n\t\t\tif (typeof middleName !== 'undefined' && middleName) { nameFormatted = nameFormatted + ' ' + middleName }\n\t\t\tnameFormatted = nameFormatted + ' ' + lastName;\n\t\t\tbreak;\n\t}\n\tconst displayName = nameFormatted + suffix;\n\n\treturn displayName;\n}\n\ngenerateDisplayName();\n\n","update":true,"storeInAccountData":false},{"name":"Password","mode":"complex","value":"// Please enter the mapping logic to generate the password.\r\nfunction generatePassword() {\r\n    let externalId = \"\" + Person.ExternalId;\r\n    let pad = \"9999\"\r\n    let padded = pad.substring(0, pad.length - externalId.length) + externalId;\r\n\r\n\tconst firstpart = \"Welkom\";\r\n\r\n\treturn firstpart + padded.substring(0,4);\r\n}\r\n\r\ngeneratePassword();"},{"name":"SamAccountName","mode":"complex","value":"function acronym(value) {\n    let matches = value.match(/\\b(\\w)/g); // ['J','S','O','N']\n    return matches.join(''); // JSON\n}\n\n// Please enter the mapping logic to generate the common name.\nfunction generateCommonName() {\n\tconst suffix = Iteration === 0 ? '' : Iteration;\n\n\tconst firstNameSub = Iteration + 1;\n    \n    let firstName = Person.Name.NickName.substring(0, firstNameSub);\n\tlet middleName = Person.Name.FamilyNamePrefix;\n\tlet lastName = Person.Name.FamilyName;\n\n\tlet mailNickname = firstName;\n\t//Check if the middleName variable contains data\n\tif (typeof middleName !== 'undefined' && middleName) { mailNickname = mailNickname + acronym(middleName); }\n\tmailNickname = mailNickname + lastName;\n\n\t//Remove blank chars\n\tmailNickname = mailNickname.replace(/\\s/g,'');\n\n\t//Remove diacritical chars\n\tmailNickname = deleteDiacriticalMarks(mailNickname);\n\n    mailNickname = mailNickname.substring(0,19);\n\n    if (firstNameSub > firstName.length) {\n        mailNickname = mailNickname + suffix;\n    }\n\n\treturn mailNickname;\n}\n\ngenerateCommonName();","unique":true,"update":false,"storeInAccountData":true},{"name":"AdditionalFields.company","mode":"complex","value":"function getValue() {\r\n    return Person.PrimaryContract.Location.Code;\r\n}\r\n\r\ngetValue();","update":true,"storeInAccountData":false},{"name":"AdditionalFields.department","mode":"complex","value":"function getValue() {\n    return Person.PrimaryContract.Location.Code + \" - \" + Person.custom.educationalGroup;\n}\n\ngetValue();","update":true,"storeInAccountData":false},{"name":"AdditionalFields.description","mode":"complex","value":"function getValue() {\n    return Person.PrimaryContract.Location.Code + \" Leerling\";\n}\n\ngetValue();","update":true,"storeInAccountData":false},{"name":"AdditionalFields.employeeNumber","mode":"field","value":"Person.ExternalId","update":false,"storeInAccountData":false},{"name":"AdditionalFields.EmployeeType","mode":"fixed","value":"Student","update":false,"storeInAccountData":false},{"name":"AdditionalFields.givenName","mode":"field","value":"Person.Name.GivenName","update":true,"storeInAccountData":false},{"name":"AdditionalFields.initials","mode":"complex","value":"function getValue() {\r\n    if (typeof Person.Name.Initials !== 'undefined' && Person.Name.Initials) {\r\n        return Person.Name.Initials.substring(0,6);\r\n    } else {\r\n        return '';\r\n    }\r\n}\r\n\r\ngetValue();","update":true,"storeInAccountData":false},{"name":"AdditionalFields.mail","mode":"complex","value":"function acronym(value) {\n    let matches = value.match(/\\b(\\w)/g); // ['J','S','O','N']\n    return matches.join(''); // JSON\n}\n\n// Please enter the mapping logic to generate the common name.\nfunction generateCommonName() {\n\tconst suffix = Iteration === 0 ? '' : Iteration;\n\n\tconst firstNameSub = Iteration + 1;\n    \n    let firstName = Person.Name.NickName.substring(0, firstNameSub);\n\tlet middleName = Person.Name.FamilyNamePrefix;\n\tlet lastName = Person.Name.FamilyName;\n\n\tlet mailNickname = firstName;\n\t//Check if the middleName variable contains data\n\tif (typeof middleName !== 'undefined' && middleName) { mailNickname = mailNickname + acronym(middleName); }\n\tmailNickname = mailNickname + lastName;\n\n\t//Remove blank chars\n\tmailNickname = mailNickname.replace(/\\s/g,'');\n\n\t//Remove diacritical chars\n\tmailNickname = deleteDiacriticalMarks(mailNickname);\n\n    if (firstNameSub > firstName.length) {\n        mailNickname = mailNickname + suffix;\n    }\n\n    mailNickname = mailNickname + '@yourdomain.com';\n\n\treturn mailNickname;\n}\n\ngenerateCommonName();","unique":true,"update":false,"storeInAccountData":false},{"name":"AdditionalFields.middleName","mode":"complex","value":"function getValue() {\r\n    switch (Person.Name.Convention) {\r\n        case 'B':\r\n            return Person.Name.FamilyNamePrefix;\r\n        case 'BP':\r\n            return Person.Name.FamilyNamePrefix;\r\n        case 'P':\r\n            return Person.Name.FamilyNamePartnerPrefix;\r\n        case 'PB':\r\n            return Person.Name.FamilyNamePartnerPrefix;\r\n        default:\r\n            return Person.Name.FamilyNamePrefix;\r\n    }\r\n}\r\n\r\ngetValue();","update":false,"storeInAccountData":false},{"name":"AdditionalFields.physicalDeliveryOfficeName","mode":"complex","value":"function getValue() {\n    return Person.PrimaryContract.Location.Code + \" - \" + Person.PrimaryContract.Location.Name;\n}\n\ngetValue();","update":true,"storeInAccountData":false},{"name":"AdditionalFields.proxyAddresses","mode":"complex","value":"function acronym(value) {\n    let matches = value.match(/\\b(\\w)/g); // ['J','S','O','N']\n    return matches.join(''); // JSON\n}\n\n// Please enter the mapping logic to generate the common name.\nfunction generateCommonName() {\n\tconst suffix = Iteration === 0 ? '' : Iteration;\n\n\tconst firstNameSub = Iteration + 1;\n    \n    let firstName = Person.Name.NickName.substring(0, firstNameSub);\n\tlet middleName = Person.Name.FamilyNamePrefix;\n\tlet lastName = Person.Name.FamilyName;\n\n\tlet mailNickname = firstName;\n\t//Check if the middleName variable contains data\n\tif (typeof middleName !== 'undefined' && middleName) { mailNickname = mailNickname + acronym(middleName); }\n\tmailNickname = mailNickname + lastName;\n\n\t//Remove blank chars\n\tmailNickname = mailNickname.replace(/\\s/g,'');\n\n\t//Remove diacritical chars\n\tmailNickname = deleteDiacriticalMarks(mailNickname);\n\n    if (firstNameSub > firstName.length) {\n        mailNickname = mailNickname + suffix;\n    }\n\n    mailNickname = ['SMTP:' + mailNickname + '@yourdomain.com'];\n\n\treturn mailNickname;\n}\n\ngenerateCommonName();","unique":true,"update":false,"storeInAccountData":false},{"name":"AdditionalFields.sn","mode":"complex","value":"// Please enter the mapping logic to generate the displayName based on name convention.\r\nfunction generateDisplayName() {\r\n    const suffix = \" | LLN\"\r\n\tlet middleName = Person.Name.FamilyNamePrefix;\r\n\tlet lastName = Person.Name.FamilyName;\r\n\tlet middleNamePartner = Person.Name.FamilyNamePartnerPrefix;\r\n\tlet lastNamePartner = Person.Name.FamilyNamePartner;\r\n\r\n\tswitch(Person.Name.Convention) {\r\n\t\tcase 'B':\r\n\t\t\tnameFormatted = '';\r\n\t\t\tif (typeof middleName !== 'undefined' && middleName) { nameFormatted = nameFormatted + middleName + ' ' }\r\n\t\t\tnameFormatted = nameFormatted + lastName;\r\n\t\t\tbreak;\r\n\t\tcase 'BP':\r\n\t\t\tnameFormatted = '';\r\n\t\t\tif (typeof middleName !== 'undefined' && middleName) { nameFormatted = nameFormatted + middleName + ' ' }\r\n\t\t\tnameFormatted = nameFormatted + lastName + ' - ';\r\n\t\t\tif (typeof middleNamePartner !== 'undefined' && middleNamePartner) { nameFormatted = nameFormatted + ' ' + middleNamePartner }\r\n\t\t\tnameFormatted = nameFormatted + ' ' + lastNamePartner;\r\n\t\t\tbreak;\r\n\t\tcase 'P':\r\n\t\t\tnameFormatted = '';\r\n\t\t\tif (typeof middleNamePartner !== 'undefined' && middleNamePartner) { nameFormatted = nameFormatted + middleNamePartner + ' '}\r\n\t\t\tnameFormatted = nameFormatted + lastNamePartner;\r\n\t\t\tbreak;\r\n\t\tcase 'PB':\r\n\t\t\tnameFormatted = '';\r\n\t\t\tif (typeof middleNamePartner !== 'undefined' && middleNamePartner) { nameFormatted = nameFormatted + middleNamePartner + ' ' }\r\n\t\t\tnameFormatted = nameFormatted + lastNamePartner + ' - ';\r\n\t\t\tif (typeof middleName !== 'undefined' && middleName) { nameFormatted = nameFormatted + ' ' + middleName }\r\n\t\t\tnameFormatted = nameFormatted + ' ' + lastName;\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tnameFormatted = '';\r\n\t\t\tif (typeof middleName !== 'undefined' && middleName) { nameFormatted = nameFormatted + middleName + ' ' }\r\n\t\t\tnameFormatted = nameFormatted + lastName;\r\n\t\t\tbreak;\r\n\t}\r\n\tconst displayName = nameFormatted + suffix;\r\n\r\n\treturn displayName;\r\n}\r\n\r\ngenerateDisplayName();\r\n\r\n","update":true,"storeInAccountData":true},{"name":"AdditionalFields.title","mode":"complex","value":"function getValue() {\r\n    return Person.PrimaryContract.Title.Name;\r\n}\r\n\r\ngetValue();","update":true,"storeInAccountData":false},{"name":"PasswordNeverExpires","mode":"fixed","value":false}]}